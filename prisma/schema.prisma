generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum ActivityType {
  STAKE
  UNSTAKE
  CLAIM_REWARDS
  PROFILE_UPDATE
  WHITELIST_MINT
  PUBLIC_MINT
  RAFFLE_JOIN
  RAFFLE_WIN
  RAFFLE_CREATE
  RAFFLE_DRAW
  NFT_TRANSFER
  COLLECTION_CREATE
  COLLECTION_UPDATE
  COLLECTION_DEPLOY
  COLLECTION_VERIFY
  USER_BLOCKED
  USER_REFERRAL
  REFERRAL_POINTS_EARNED
  POINTS_SPENT
  POINTS_ADJUSTMENT
  RAFFLE_TICKET_PURCHASE
}

enum CollectionStatus {
  PENDING
  DEPLOYING
  DEPLOYMENT_FAILED
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum CollectionType {
  ERC721
  ERC1155
  ERC404
}

enum PointType {
  SIGNUP_BONUS
  MINT_COMMISSION
  STAKE_REWARD
  DAILY_STAKE_REWARD
  RAFFLE_TICKET_BONUS
  RAFFLE_ENTRY_BONUS
  REFERRAL_BONUS
  ADMIN_ADJUSTMENT
  RAFFLE_WINNER_BONUS
  LOYALTY_REWARD
  REDEEM
}

enum BlockchainNetwork {
  TEA
}

enum RaffleStatus {
  UPCOMING
  LIVE
  COMPLETED
  CANCELLED
}

enum RewardTxType {
  DAILY_STAKE
  RAFFLE_WIN
  REFERRAL_BONUS
  ADMIN_AWARD
}

// --- Models ---
model User {
  id                     String            @id @default(cuid()) @map("user_id")
  username               String?           @unique @map("user_username")
  image                  String?           @map("user_image")
  role                   UserRole          @default(USER) @map("user_role")
  createdAt              DateTime          @default(now()) @map("user_createdAt")
  updatedAt              DateTime          @updatedAt @map("user_updatedAt")
  address                String            @unique @map("user_address")
  isBlocked              Boolean           @default(false) @map("user_isBlocked")
  referralCode           String            @unique @default(cuid()) @map("user_referralCode")
  referredById           String?           @map("user_referredBy")
  referredBy             User?             @relation("UserReferrals", fields: [referredById], references: [id])
  referredUsers          User[]            @relation("UserReferrals")
  points                 Int               @default(0) @map("user_points")

  stakedNFTs             Staked[]
  activities             Activity[]
  raffleParticipants     RaffleParticipant[]
  leaderboards           StakeLeaderboard[]
  rewardTransactions     RewardTransaction[]
  createdCollections     NftCollection[]   @relation("CollectionCreator")
  createdRaffles         Raffle[]          @relation("RaffleCreator")
  referralPointsGiven    ReferralPoint[]   @relation("ReferrerPoints")
  referralPointsReceived ReferralPoint[]   @relation("ReferredUserPoints")
  whitelistEntries       Whitelist[]

  @@map("users")
}

model ReferralPoint {
  id             String   @id @default(cuid()) @map("point_id")
  referrerId     String   @map("point_referrerId")
  referrer       User     @relation("ReferrerPoints", fields: [referrerId], references: [id])
  referredUserId String   @map("point_referredUserId")
  referredUser   User     @relation("ReferredUserPoints", fields: [referredUserId], references: [id])
  amount         Int      @map("point_amount")
  type           PointType @map("point_type")
  status         String   @default("COMPLETED") @map("point_status")
  description    String?  @db.Text @map("point_description")
  createdAt      DateTime @default(now()) @map("point_createdAt")
  txHash         String?  @unique @map("point_txHash")

  @@index([referrerId])
  @@index([referredUserId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("referral_points")
}

model NftCollection {
  id                      String            @id @default(cuid()) @map("collection_id")
  name                    String            @map("collection_name")
  symbol                  String?           @map("collection_symbol")
  description             String?           @db.Text @map("collection_description")
  imageUrl                String?           @map("collection_imageUrl")
  bannerUrl               String?           @map("collection_bannerUrl")
  twitterUrl              String?           @map("collection_twitterUrl")
  discordUrl              String?           @map("collection_discordUrl")
  websiteUrl              String?           @map("collection_websiteUrl")
  type                    CollectionType    @default(ERC721) @map("collection_type")
  contractAddress         String            @unique @db.Text @map("collection_contractAddress")
  deployedTxHash          String?           @unique @map("collection_deployedTxHash")
  blockchainNetwork       BlockchainNetwork? @map("collection_blockchainNetwork")
  mintPrice               Decimal?          @db.Decimal(65, 30) @map("collection_mintPrice")
  mintCurrency            String?           @map("collection_mintCurrency")
  maxSupply               Int?              @map("collection_maxSupply")
  currentSupply           Int               @default(0) @map("collection_currentSupply")
  mintLimitPerWallet      Int?              @map("collection_mintLimitPerWallet")
  publicMintStartDate     DateTime?         @map("collection_publicMintStartDate")
  publicMintEndDate       DateTime?         @map("collection_publicMintEndDate")
  whitelistStartDate      DateTime?         @map("collection_whitelistStartDate")
  whitelistEndDate        DateTime?         @map("collection_whitelistEndDate")
  whitelistMerkleRoot     String?           @map("collection_whitelistMerkleRoot") // Merkle root untuk whitelist
  royaltyBps              Int?              @map("collection_royaltyBps")        // Royalty fee (basis points)
  platformFeeBps          Int?              @map("collection_platformFeeBps")    // Platform fee (basis points)
  status                  CollectionStatus  @default(PENDING) @map("collection_status")
  verified                Boolean           @default(false) @map("collection_verified")
  verifiedBy              String?           @map("collection_verifiedBy")
  creatorAddress          String            @map("collection_creatorAddress")
  createdById             String            @map("collection_createdBy")
  creator                 User              @relation("CollectionCreator", fields: [createdById], references: [id])
  createdAt               DateTime          @default(now()) @map("collection_createdAt")
  updatedAt               DateTime          @updatedAt @map("collection_updatedAt")

  items                   NftItem[]
  raffles                 Raffle[]          @relation("CollectionRaffles")
  whitelists              Whitelist[]
  traitCategories         TraitCategory[]

  @@index([contractAddress])
  @@index([name])
  @@index([status])
  @@index([createdById])
  @@index([type])
  @@index([publicMintStartDate])
  @@map("nft_collections")
}

model TraitCategory {
  id              String      @id @default(cuid())
  collectionId    String
  collection      NftCollection @relation(fields: [collectionId], references: [id])
  name            String
  order           Int         @default(0)
  traits          Trait[]

  @@unique([collectionId, name])
  @@map("trait_categories")
}

model Trait {
  id              String        @id @default(cuid())
  categoryId      String
  category        TraitCategory @relation(fields: [categoryId], references: [id])
  name            String
  imageUrl        String        @db.Text
  rarity          Float         @default(1.0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([categoryId, name])
  @@map("traits")
}

model NftItem {
  id                String        @id @default(cuid()) @map("nft_id")
  contractAddress   String        @db.Text @map("nft_contractAddress")
  tokenId           Int           @map("nft_tokenId")
  ownerAddress      String        @map("nft_ownerAddress")
  imageUrl          String?       @map("nft_imageUrl")
  name              String?       @map("nft_name")
  description       String?       @db.Text @map("nft_description")
  attributes        Json?         @map("nft_attributes") // Stores selected traits as JSON
  collectionId      String        @map("nft_collectionId")
  collection        NftCollection @relation(fields: [collectionId], references: [id])
  lastOwnerSync     DateTime?     @map("nft_lastOwnerSync")
  createdAt         DateTime      @default(now()) @map("nft_createdAt")
  updatedAt         DateTime      @updatedAt @map("nft_updatedAt")

  stakedEntry       Staked?
  raffleWinnerFor   Raffle?       @relation("RaffleWinningNft")

  @@unique([contractAddress, tokenId], name: "UniqueNFTItem")
  @@index([ownerAddress])
  @@index([collectionId])
  @@map("nft_items")
}

model Staked {
  id                      String    @id @default(cuid()) @map("staked_id")
  userId                  String    @map("staked_userId")
  user                    User      @relation(fields: [userId], references: [id])
  nftItemId               String    @unique @map("staked_nftItemId")
  nftItem                 NftItem   @relation(fields: [nftItemId], references: [id])
  stakeTimestamp          DateTime  @default(now()) @map("staked_stakeTimestamp")
  unstakeTimestamp        DateTime? @map("staked_unstakeTimestamp")
  isStaked                Boolean   @default(true) @map("staked_isStaked")
  isEmergency             Boolean   @default(false) @map("staked_isEmergency")
  claimedRewards          Decimal   @default(0.0) @db.Decimal(65, 30) @map("staked_claimedRewards")
  lastRewardClaimedAt     DateTime? @map("staked_lastRewardClaimedAt")
  lockPeriodDays          Int?      @default(30) @map("staked_lockPeriodDays")
  emergencyFeeBps         Int?      @default(1000) @map("staked_emergencyFeeBps")
  rewardMultiplier        Float?    @default(1.0) @map("staked_rewardMultiplier")

  rewardTransactions RewardTransaction[]

  @@unique([userId, nftItemId], name: "UniqueUserStake")
  @@index([userId])
  @@index([isStaked])
  @@map("staked_nfts")
}

model RewardTransaction {
  id            String       @id @default(cuid()) @map("rewardTx_id")
  userId        String       @map("rewardTx_userId")
  user          User         @relation(fields: [userId], references: [id])
  stakedId      String?      @map("rewardTx_stakedId")
  staked        Staked?      @relation(fields: [stakedId], references: [id])
  amount        Decimal      @db.Decimal(65, 30) @map("rewardTx_amount")
  type          RewardTxType @map("rewardTx_type")
  timestamp     DateTime     @default(now()) @map("rewardTx_timestamp")

  @@index([userId])
  @@index([stakedId])
  @@index([timestamp])
  @@map("reward_transactions")
}

model StakeLeaderboard {
  id                    String   @id @default(cuid()) @map("leaderboard_id")
  userId                String   @unique @map("leaderboard_userId")
  user                  User     @relation(fields: [userId], references: [id])
  totalStakedNfts       Int      @default(0) @map("leaderboard_totalStakedNfts")
  totalRewardsClaimed   Decimal  @default(0.0) @db.Decimal(65, 30) @map("leaderboard_totalRewardsClaimed")
  rank                  Int      @default(0) @map("leaderboard_rank")
  lastUpdated           DateTime @updatedAt @map("leaderboard_lastUpdated")

  @@index([totalStakedNfts])
  @@index([totalRewardsClaimed])
  @@index([rank])
  @@map("stake_leaderboards")
}

model Raffle {
  id                    String            @id @default(uuid()) @map("raffle_id")
  title                 String            @map("raffle_title")
  description           String?           @map("raffle_description")
  totalTickets          Int               @map("raffle_totalTickets")
  ticketPrice           Decimal           @db.Decimal(65, 30) @map("raffle_ticketPrice")
  maxEntriesPerUser     Int               @map("raffle_maxEntriesPerUser")
  startDate             DateTime          @map("raffle_startDate")
  endDate               DateTime          @map("raffle_endDate")
  banner                String?           @map("raffle_raffleBanner")
  ticketsSold           Int               @default(0) @map("raffle_ticketsSold")
  status                RaffleStatus      @default(UPCOMING) @map("raffle_status")
  winnerAddress         String?           @map("raffle_winnerAddress")
  winnerNftItemId       String?           @unique @map("raffle_winnerNftItemId")
  winnerNftItem         NftItem?          @relation("RaffleWinningNft", fields: [winnerNftItemId], references: [id])
  prizeType             String?           @default("NFT") @map("raffle_prizeType")
  tokenAddress          String?           @map("raffle_tokenAddress")
  tokenAmount           Decimal?          @db.Decimal(65, 30) @map("raffle_tokenAmount")
  createdAt             DateTime          @default(now()) @map("raffle_createdAt")
  updatedAt             DateTime          @updatedAt @map("raffle_updatedAt")

  participants          RaffleParticipant[]
  collectionId          String?           @map("raffle_collectionId")
  collection            NftCollection?    @relation("CollectionRaffles", fields: [collectionId], references: [id])
  createdById           String            @map("raffle_createdBy")
  creator               User              @relation("RaffleCreator", fields: [createdById], references: [id])

  @@index([status, endDate])
  @@index([title])
  @@index([collectionId])
  @@index([createdById])
  @@map("raffles")
}

model RaffleParticipant {
  id                String   @id @default(uuid()) @map("participant_id")
  raffleId          String   @map("participant_raffleId")
  raffle            Raffle   @relation(fields: [raffleId], references: [id])
  userId            String   @map("participant_userId")
  user              User     @relation(fields: [userId], references: [id])
  walletAddress     String   @map("participant_walletAddress")
  ticketsBought     Int      @map("participant_ticketsBought")
  purchaseDate      DateTime @default(now()) @map("participant_purchaseDate")

  @@unique([raffleId, userId], name: "UniqueRaffleParticipant")
  @@index([raffleId, walletAddress])
  @@map("raffle_participants")
}

model Activity {
  id            String       @id @default(cuid()) @map("activity_id")
  userId        String       @map("activity_userId")
  user          User         @relation(fields: [userId], references: [id])
  type          ActivityType @map("activity_type")
  description   String       @db.Text @map("activity_description")
  timestamp     DateTime     @default(now()) @map("activity_timestamp")
  txHash        String?      @unique @map("activity_txHash")

  @@index([userId])
  @@index([timestamp])
  @@index([type])
  @@map("activities")
}

model Whitelist {
  id            String        @id @default(cuid()) @map("whitelist_id")
  collectionId  String        @map("collection_id")
  collection    NftCollection @relation(fields: [collectionId], references: [id])
  userId        String        @map("user_id")
  user          User          @relation(fields: [userId], references: [id])
  allocatedMints Int          @default(1) @map("allocatedMints")

  @@unique([collectionId, userId])
  @@map("whitelists")
}